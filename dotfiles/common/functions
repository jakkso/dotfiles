#!/usr/bin/env bash

###############
## Utilities ##
###############

define() {
  $HOME/bin/define/define "$@"
}

getThread() {
  $HOME/bin/threadDownloader "$@"
}

cedl() {
  $HOME/bin/cedl "$@"
}

untar() {
  item=`file $@`
  case ${item} in
    *"XZ compressed"*)
      tar -xvf $@
      ;;
    *"gzip compress"*)
      tar -zxvf $@
      ;;
    *)
      echo "Is this a compressed file?"
      echo ${item}
      ;;
  esac
}

mk() {
  mkdir -p "$@" && cd "$@"
}

copyssh() {
  pbcopy < "$HOME/.ssh/id_rsa.pub"
}

convertwebm () {
 ffmpeg -i $1 -vcodec  libvpx-vp9 -b:v 1M -acodec libvorbis $2
}

mp3() {
  youtube-dl -f bestaudio -x --audio-format mp3 --audio-quality 0 -o '%(title)s.%(ext)s' $@
}

sizes() {
  du -xhd1 | sort -n
}

weather() {
  curl http://wttr.in/FNL
}

gifmaker() {
  palette="/tmp/palette.png"
  filters="fps=15,scale=320:-1:flags=lanczos"
  ffmpeg -v warning -i $1 -vf "$filters,palettegen" -y $palette
  ffmpeg -v warning -i $1 -i $palette -lavfi "$filters [x]; [x][1:v] paletteuse" -y $2
}

#############
## Network ##
#############

localip() {
  ifconfig | grep 'inet ' | grep -v 127.0.0.1
  echo "$(redBold)(\$ref) "
}

# Print external IP
externalip() {
  curl 'https://api.ipify.org'  && echo
}

port() {
  sudo netstat -ltnp | grep -w ':$1'
}

portcheck() {
    re='^[0-9]+$'
    reserved=1024
    for port in "$@"
        do
            if ! [[ ${port} =~ $re ]]; then
                echo "Error: not a number: $port"
            elif [[ ${port} -le ${reserved}  ]]; then
                sudo lsof -nP -i4TCP:${port} | grep LISTEN
            else
                lsof -nP -i4TCP:${port} | grep LISTEN
            fi
        done
}


###############
## Dev Tools ##
###############

gitinit() {
  git init
  touch .gitignore
  git add .gitignore *
}

dvolume() {
  local volume volumes_to_list=${1:-$(docker volume ls --quiet)}
  for volume in ${volumes_to_list}; do
    sudo ls -lRa "$(docker volume inspect --format '{{ .Mountpoint }}' "$volume")"
    echo
  done
}

# Print lines of code for files in current git directory
loc() {
  git ls-files | xargs wc -l
}

# Reload the shell (i.e. invoke as a login shell)
reload() {
  exec ${SHELL} -l
}

# Print each PATH entry on a separate line
path() {
  echo -e ${PATH//:/\\n}
}

# Start ngrok
ngrok() {
  ~/bin/ngrok $@
}

loadrvm() {
  [[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*
}

shebang() {
  if [[ $1 = '' ]]; then
    echo '#!/usr/bin/env '
    return
  fi
  echo "#!/usr/bin/env $2" > $1 && chmod u+x $1 && ${EDITOR} $1
}

genUUID() {
 head -c 64 /dev/urandom | base64
}

######################
## Prompt Functions ##
######################

# Colors
red() {
  echo "\[\e[0;31m\]"
}

redBold() {
  echo "\[\e[1;31m\]"
}

green() {
  echo "\[\e[0;32m\]"
}

greenBold() {
  echo "\[\e[1;32m\]"
}

blue() {
  echo "\[\e[0;34m\]"
}

blueBold() {
  echo "\[\e[1;34m\]"
}

purple() {
  echo "\[\e[0;35m\]"
}

purpleBold() {
  echo "\[\e[1;35m\]"
}

white() {
  echo "\[\e[0;37m\]"
}

whiteBold() {
  echo "\[\e[1;37m\]"
}

colorDone() {
  echo "\[\033[00m\]"
}

# Shows what branch you're on if in a git repo
gitBranch() {
  local ref=$(git branch 2>/dev/null | sed -n '/\* /s///p')
  if [[ "$ref" != "" ]]
  then
    echo "($ref) "
  fi
}

# Prompt string, used in bash_profile
prompt() {
 # The escaped $ prior to gitBranch means that gitBranch is called on each prompt redraw
 echo "$(green)\h $(blueBold)\w $(redBold)\$(gitBranch)$(whiteBold)> $(colorDone) "
}

###################
## Relay Control ##
###################

light() {
  ~/bin/tplink-smartplug/toggle_lights.py "$@"
}
